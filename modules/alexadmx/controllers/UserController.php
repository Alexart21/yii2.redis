<?php

namespace app\modules\alexadmx\controllers;

use Yii;
use app\models\User;
use app\modules\alexadmx\models\SetPassForm;
use app\modules\alexadmx\models\UserSearch;
use yii\web\BadRequestHttpException;
use yii\web\MethodNotAllowedHttpException;
use yii\web\NotFoundHttpException;
use yii\helpers\FileHelper;

/**
 * UserController implements the CRUD actions for User model.
 */
class UserController extends AppAlexadmxController
{
    public function beforeAction($action)
    {
        // С админом не позволяем никаких действий
        if (Yii::$app->request->get('id') == User::ADMIN_ID) {
            throw new MethodNotAllowedHttpException('Ата-та, админа вам трогать нии-и-ззя !!!');
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all User models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new UserSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single User model.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new User model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new User();

        if ($model->load(Yii::$app->request->post())) {
            if ($model->role == User::ROLE_ADMIN) {
                throw new BadRequestHttpException('Ата-та, вы не можете создать пользователя с правами админа !!!');
            }
            if ($model->save()) {
                return $this->redirect(['view', 'id' => $model->id]);
            }
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing User model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post())) {
            if ($model->role == User::ROLE_ADMIN) {
                $model->role = User::ROLE_USER;
                Yii::$app->session->setFlash('error', '<br><br><h4>Вы не можете назначить второго админа. Поле ROLE установлено в 10. И прекратите фигней заниматься !');
            }
            if ($model->save()) {
                return $this->redirect(['view', 'id' => $model->id]);
            }
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing User model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $user = $this->findModel($id);
        // Удаляем папку с файлами
        $path = Yii::getAlias('@upload') . '/users/usr' . $user->id;
        FileHelper::removeDirectory(FileHelper::normalizePath($path));
        // удаляем запись в базе
        $user->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the User model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return User the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = User::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
    }

    /* Присваиваем статус активного  */
    public function actionSetActive($id)
    {
        $id = (int)$id;
        $user = User::findOne(['id' => $id]);
        $user->status = User::STATUS_ACTIVE;
        $user->register_token = null;
        $user->password_reset_token = null;
        if ($user->save()) {
            Yii::$app->session->setFlash('success', 'Для ' . $user->username . ' установлен статус STATUS_ACTIVE=' . User::STATUS_ACTIVE);
        } else {
            Yii::$app->session->setFlash('error', 'Произошла ошибка при запросе.');
        }

        return $this->redirect('/alexadmx/user');;
    }

    /* Присваиваем статус удаленного(неактивного) */
    public function actionSetDeleted($id)
    {
        $id = (int)$id;
        $user = User::findOne(['id' => $id]);
        $user->status = User::STATUS_DELETED;
        $user->register_token = null;
        $user->password_reset_token = null;
        if ($user->save()) {
            Yii::$app->session->setFlash('success', 'Для ' . $user->username . ' установлен статус STATUS_DELETED=' . User::STATUS_DELETED);
        } else {
            Yii::$app->session->setFlash('error', 'Произошла ошибка при запросе.');
        }

        return $this->redirect('/alexadmx/user');;
    }

    /* Всеx c указанным статусом переводим в статус активного */
    public function actionAllInActive($status)
    {
        $status = (int)$status;
        $res = User::updateAll(['status' => User::STATUS_ACTIVE], ['status' => $status]);
        if ($res) {
            Yii::$app->session->setFlash('success', 'Измененено записей :' . $res);
        } else {
            Yii::$app->session->setFlash('error', 'Произошла ошибка при запросе.');
        }
        return $this->redirect('/alexadmx/user');
    }


    /* Безвозвратно Удалить всех с указанным статусом */
    public function actionDeleteAllBadUsers($status)
    {
        $status = (int)$status;
        // рекурсивно удаляем все папки юзерских файлов если есть
        $users = User::findAll(['status' => $status]);
        foreach ($users as $user) {
            if ($user->avatar_path) {
                $path = Yii::getAlias('@app/web') . '/upload/users/usr' . $user->id;
                $path = FileHelper::normalizePath($path);
                FileHelper::removeDirectory($path);
            }
        }
        // Удаляем записи в базе
        $res = User::deleteAll(['status' => $status]);

        if ($res) {
            Yii::$app->session->setFlash('success', 'Удалено записей :' . $res);
        } else {
            Yii::$app->session->setFlash('error', 'Произошла ошибка при запросе.');
        }

        return $this->redirect('/alexadmx/user');
    }


    /* Установка пароля */
    public function actionSetpass($id)
    {
        $id = (int)$id;
        // не путайся 2 модели тут
        $user = User::findOne(['id' => $id]);
        $model = new SetPassForm();

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            $user->setPassword($model->password);
            if ($user->save()) {
                Yii::$app->session->setFlash('success', 'Установлен пароль для ' . $user->username);
            } else {
                Yii::$app->session->setFlash('error', 'Произошла ошибка при запросе.');
            }

            return $this->redirect('/alexadmx/user');
//            return $this->redirect(Yii::$app->request->referrer);

        }

        return $this->render('setpass', compact('user', 'model'));
    }

    /* Пользователи не подтвердившие регистрацию */
    public function actionUnregister()
    {
        $searchModel = new UserSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        return $this->render('unregister', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /* Пользователи помеченные как удаленные */
    public function actionDeleted()
    {
        $searchModel = new UserSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        return $this->render('deleted', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /* Есть ли не подтвердившие регистрацию пользователи */
    public static function isUnregister()
    {
        return (bool)User::findOne(['status' => User::STATUS_REQUEST]);
    }

    /* Есть ли помеченные как удаленные */
    public static function isDeleted()
    {
        return (bool)User::findOne(['status' => User::STATUS_DELETED]);
    }

    /* Все с неподтвержденной регистрацией */
    public static function findAllByUnRegisterStatus()
    {
        return User::findAll(['status' => User::STATUS_REQUEST]);
    }

}
