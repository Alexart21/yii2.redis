<?php

namespace app\controllers;

use app\models\SignupForm;
use app\models\userSettings\CloseForm;
use app\models\userSettings\PassForm;
//use app\models\userSettings\TestModel;
//use yii\base\ErrorException;
//use yii\db\ActiveRecord;
use yii\filters\AccessControl;
use Yii;
use app\models\userSettings\User;
use yii\filters\VerbFilter;
use yii\helpers\FileHelper;
use yii\helpers\Html;
use yii\web\BadRequestHttpException;
use yii\web\MethodNotAllowedHttpException;
use yii\web\UploadedFile;
use app\models\userSettings\EmailForm;
use yii\widgets\ActiveForm;
use yii\web\Response;

class UserSettingsController extends \yii\web\Controller
{
    public $layout = 'auth';

    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::class,
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'], // для авторизованных
                    ]
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::class,
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
            'rateLimiter' => [
                // сторонняя фича. Пишется в кэш.Бд не трогается.
                'class' => \ethercreative\ratelimiter\RateLimiter::class,
                'only' => ['avatar', 'email', 'pass', 'close'],
                // The maximum number of all'ow'ed requests
//                'rateLimit' => Yii::$app->params['rateLimit'],
                'rateLimit' => Yii::$app->params['rateLimit'],
                // The time period for the rates to apply to
                'timePeriod' => 60,
                // Separate rate limiting for guests and authenticated users
                // Defaults to true
                // - false: use one set of rates, whether you are authenticated or not
                // - true: use separate ratesfor guests and authenticated users
                'separateRates' => false,
                // Whether to return HTTP headers containing the current rate limiting information
                'enableRateLimitHeaders' => true,
                'errorMessage' => 'Лимит запросов исчерпан. Не более ' . Yii::$app->params['rateLimit'] . ' запросов в минуту',
            ],
        ];
    }

    public function beforeAction($action)
    {
        if (User::isAdmin(Yii::$app->user->identity->username)) {
            // разлогиниваем
            Yii::$app->user->logout();
            die('<h1>Раз уж ты админ то все делай ручками !!!</h1>');
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        $model = User::findOne(Yii::$app->user->identity->getId());

        if (!$model) {
            throw new MethodNotAllowedHttpException('Нет такого пользователя.Как ты сюда попал(а)?!');
        }
        // AJAX валидация(поле username)
        if (Yii::$app->request->isAjax) {
            if ($model->load(Yii::$app->request->post())) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                return ActiveForm::validate($model);
            }
        }

        if (Yii::$app->request->isPost) {
            $transaction = User::getDb()->beginTransaction();

            /* Изменили имя (здесь обычный запрос) */
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                try {
                    if (empty($model->old_username)) {
                        $old_username = [];
                    } else {
                        $old_username = unserialize($model->old_username);
                    }
                    array_push($old_username, [Yii::$app->user->identity->username, date('Y-m-d')]);
                    $model->old_username = serialize($old_username);
                    $model->save();
                    $transaction->commit();
                    return $this->refresh();
                } catch (\Throwable $e) {
                    $transaction->rollBack();
                    throw $e;
                }
            }
        }
        return $this->render('index', compact('model'));
    }

    public function actionAvatar()
    {
        if (Yii::$app->request->isPost) {
            // картинку (здесь асинхронный feth() Yii его не определяет как AJAX)
            if (!empty($_FILES["avatar"]["size"])) { // пришла картинка (использовали на клиенте JS fetch() ())
                $model = User::findOne(Yii::$app->user->identity->getId());
                $transaction = User::getDb()->beginTransaction();

                if ($_FILES["avatar"]["size"] > Yii::$app->params['max_avatar_size'] * 1024) { // картинка больше чем позволено
                    Yii::$app->response->statusCode = 413; // 'Length Required'
                    return;
                }

                if (!exif_imagetype($_FILES["avatar"]["tmp_name"])) {
                    Yii::$app->response->statusCode = 415; // 'Unsupported Media Type'
                    return;
//                    throw new BadRequestHttpException('Не распознан файл изображения');
                }
                $imgName = substr(time(), -4) . strtolower(Yii::$app->security->generateRandomString(12)) . '.' . 'png';
                $usrId = Yii::$app->user->identity->getId();
//                $basePath = Yii::getAlias('@app/web') . '/upload/users/';
                $basePath = Yii::getAlias('@upload') . '/users/';
                $imgDir = $basePath . 'usr' . $usrId . '/img/avatar/';
                // если есть папка с аватаром - очищаем, если нет - создаем
                if(is_dir($imgDir)){
                    $this->clearDir($imgDir);
                }else{
                    if (!FileHelper::createDirectory($imgDir)) {
                        Yii::$app->response->statusCode = 400;
                        return;
                    }
                }

                $imgPath = FileHelper::normalizePath($imgDir . '/' . $imgName);
                try {
                    $model->avatar_path = $imgName;
                    $model->save();
                    $transaction->commit();
                } catch (\Throwable $e) {
                    $transaction->rollBack();
                    throw $e;
                }
                if (!move_uploaded_file($_FILES["avatar"]["tmp_name"], $imgPath)) {
                    Yii::$app->response->statusCode = 400;
                    return;
//                    throw new BadRequestHttpException('Ошибка при загрузке файла');
                }
                return true;
            }
        }
    }

    // закрытие аккаунта
    public function actionClose()
    {
        $model = User::findOne(Yii::$app->user->identity->getId());
        $closeFormModel = new CloseForm();

        if ($closeFormModel->load(Yii::$app->request->post()) && $closeFormModel->validate()) {
            $transaction = User::getDb()->beginTransaction();
            try {
                // помечаем в базе как удаленного(неактивного)
                $model->status = 0;
                $model->save();
                $transaction->commit();
                Yii::$app->session->setFlash('success', 'Аккаунт для ' . Yii::$app->user->identity->username . ' закрыт');
            } catch (\Exception $e) {
                $transaction->rollBack();
                Yii::$app->session->setFlash('error', 'Произошла ошибка. Повторите попытку или свяжитесь с администратором.');
                throw $e;
            }
            Yii::$app->user->logout(false);
            return $this->goHome();
        }
        return $this->render('close', compact('closeFormModel'));
    }

    // изменение email
    public function actionEmail($id = null, $token = null)
    {
        if ($id && $token) { // пришли по ссылке для подтверждения смены email
            $id = (int)$id;
            $token = Html::encode($token);
            if (!SignupForm::isValidToken($token)) {
                throw new BadRequestHttpException('Недействительный токен');
            }

            $user = User::findOne(['id' => $id, 'email_reset_token' => $token]);
            if (!$user) {
                throw new BadRequestHttpException('Не найден пользователь, попробуйте повторить попытку или свяжитесь с администратором');
            }
            ///
            $transaction = User::getDb()->beginTransaction();
            try {
                if (empty($user->old_email)) {
                    $old_email = [];
                } else {
                    $old_email = unserialize($user->old_email);
                }
                array_push($old_email, [Yii::$app->user->identity->email, date('Y-m-d')]);
                //
                $user->old_email = serialize($old_email);
                $user->email = $user->new_email_request;
                $user->email_reset_token = null;
                $user->new_email_request = null;
                $res = $user->save();
                if ($res) {
                    Yii::$app->session->setFlash('success', 'Вы успешно сменили Email.');
                    $transaction->commit();
                    return $this->goHome();
                } else {
                    Yii::$app->session->setFlash('error', 'Произошла ошибка. Повторите попытку или свяжитесь с администратором.');
                    $transaction->rollBack();
                    return $this->goHome();
                }
            }catch (\Exception $e){
                $transaction->rollBack();
                throw $e;
            }
        }
////////////////////////
        $emailFormModel = new EmailForm();
        // AJAX валидация
        if (Yii::$app->request->isAjax) {
            if ($emailFormModel->load(Yii::$app->request->post())) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                return ActiveForm::validate($emailFormModel);
            }
        }

        if ($emailFormModel->load(Yii::$app->request->post()) && $emailFormModel->validate()) {
            $user = User::findOne(Yii::$app->user->identity->getId());
            //
            $transaction = User::getDb()->beginTransaction();
            try {
                $user->email_reset_token = Yii::$app->security->generateRandomString(30) . '_' . time();
                $user->new_email_request = $emailFormModel->email;
                $save = $user->save();
                $sendEmail = $emailFormModel->sendEmail($user);
                $result = $save && $sendEmail;
                if ($result) {
                    Yii::$app->session->setFlash('success', 'Для завершения пройдите по ссылке высланной Вам на новый Email. Ссылка действительна в течении ' . Yii::$app->params['user.registerTokenExpire'] / 3600 . ' часа');
                    $transaction->commit();
                    return $this->redirect('/');
                } else {
                    Yii::$app->session->setFlash('error', 'Произошла ошибка. Повторите попытку или свяжитесь с администратором');
                    $transaction->rollBack();
                    return $this->redirect('/');
                }
            }catch (\Exception $e){
                $transaction->rollBack();
                throw $e;
            }
        }

        return $this->render('email', compact('emailFormModel'));
    }

    public function actionPass()
    {
        $passFormModel = new PassForm();

        // AJAX валидация поля password
        if (Yii::$app->request->isAjax) {
            if ($passFormModel->load(Yii::$app->request->post())) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                return ActiveForm::validate($passFormModel);
            }
        }
        //
        if ($passFormModel->load(Yii::$app->request->post()) && $passFormModel->validate()) {
            $user = User::findOne(Yii::$app->user->identity->getId());
            if (!$user) {
                throw new MethodNotAllowedHttpException('Нет такого пользователя.Как ты сюда попал(а)?!');
            }
            //
            $transaction = User::getDb()->beginTransaction();
            try {
                $user->setPassword($passFormModel->new_password);
                $user->save();
                $transaction->commit();
                Yii::$app->session->setFlash('success', 'Ваш пароль успешно изменен.');
                Yii::$app->user->logout(false); // не удаляем сесии
                return $this->redirect('/user/login');
            }catch (\Exception $e) {
                $transaction->rollBack();
                throw $e;
            }
        }
        return $this->render('pass', compact('passFormModel'));
    }

    /* Удаление аватара */
    public function actionDeleteAvatar()
    {
        $usrId = Yii::$app->user->identity->getId();
        $user = User::findOne($usrId);
        if (!$user) {
            throw new MethodNotAllowedHttpException('Нет такого пользователя.Как ты сюда попал(а)?!');
        }

        $delDir = Yii::getAlias('@upload') . '/users/' . 'usr' . $usrId . '/img/avatar';
        //
        $transaction = User::getDb()->beginTransaction();
        try {
            FileHelper::removeDirectory($delDir);
            $user->avatar_path = null;
            $user->save();
            $transaction->commit();
        } catch (\Exception $e) {
            $transaction->rollBack();
            throw $e;
        }
        return $this->redirect('/user-settings');

    }


    private function clearDir($dir)
    {
        $files =  FileHelper::findFiles($dir);
        if(!empty($files)){
            foreach ($files as $file){
                unlink($file);
            }
        }
    }
}
